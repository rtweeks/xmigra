module XMigra
  
  # Base class for XMigra plugins.
  #
  # Derive a class from this class, instantiate, and call +activate!+ on the
  # instance.
  #
  #   class YearTemplatePlugin < XMigra::Plugin
  #     def amend_composed_sql(sql)
  #       sql.gsub! '[{year}]', Date.today.year.to_s
  #     end
  #   end
  #
  #   YearTemplatePlugin.new.activate!
  #
  # It is best practice to define the plugin class in one file and then, in
  # a second file, require the first file, instantiate the class, and activate
  # the plugin.
  
  class Plugin
    class <<self
      attr_reader :active
    end
    
    
    # Make this XMigra::Plugin instance the active instance.  Only one
    # plugin may be active at any time.
    
    def activate!
      Plugin.instance_variable_set :@active, self
    end
    
    
    # Amend SQL coming from source documents.  The String object passed to
    # this method will be included in the commands to run, and any
    # modifications made to this object will be reflected in the script.
    # XMigra only calls this method to amend SQL read in from source files.
    
    def amend_source_sql(sql)
    end
    
    
    # Amend SQL for script after all parts are combined.  This method will
    # have an opportunity to amend all of the SQL in the output script,
    # including SQL generated by XMigra.
    #
    # XMigra only calls this method one time for the entire output script
    # _prior_ to any transformation necessary for script transactionality
    # (e.g. splitting the script into batches and encoding as string
    # literals).  The one exception to this is for any branch upgrade SQL,
    # which will already be encoded in one or more string literals.
    
    def amend_composed_sql(sql)
    end
  end
end
